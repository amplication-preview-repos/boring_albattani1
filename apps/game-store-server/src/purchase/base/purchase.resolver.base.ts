/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Purchase } from "./Purchase";
import { PurchaseCountArgs } from "./PurchaseCountArgs";
import { PurchaseFindManyArgs } from "./PurchaseFindManyArgs";
import { PurchaseFindUniqueArgs } from "./PurchaseFindUniqueArgs";
import { DeletePurchaseArgs } from "./DeletePurchaseArgs";
import { PurchaseService } from "../purchase.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Purchase)
export class PurchaseResolverBase {
  constructor(
    protected readonly service: PurchaseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async _purchasesMeta(
    @graphql.Args() args: PurchaseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Purchase])
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async purchases(
    @graphql.Args() args: PurchaseFindManyArgs
  ): Promise<Purchase[]> {
    return this.service.purchases(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Purchase, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "own",
  })
  async purchase(
    @graphql.Args() args: PurchaseFindUniqueArgs
  ): Promise<Purchase | null> {
    const result = await this.service.purchase(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Purchase)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "delete",
    possession: "any",
  })
  async deletePurchase(
    @graphql.Args() args: DeletePurchaseArgs
  ): Promise<Purchase | null> {
    try {
      return await this.service.deletePurchase(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
